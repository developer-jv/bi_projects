x-airflow-common: &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:3.0.3}
  env_file:
    - .env # Carga AIRFLOW_UID
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    AIRFLOW__CORE__SIMPLE_AUTH_MANAGER_USERS:
      "admin:admin" # crea 1 usuario admin
      # 👇 NUEVO: acceso correcto al API-server desde todos los contenedoress
    AIRFLOW__CORE__EXECUTION_API_SERVER_URL: "http://airflow-api-server:8080/execution/"
    # --- claves compartidas ---
    AIRFLOW__API_AUTH__JWT_SECRET: "${JWT_SECRET}"
    AIRFLOW__WEBSERVER__SECRET_KEY: "${SECRET_KEY}" #variable de entorno, ubicadas en .env
    AIRFLOW__API__SECRET_KEY: "${SECRET_KEY}" # variable de entorno, ubicadas en .env
    AIRFLOW__CORE__FERNET_KEY: "${FERNET_KEY}" # variable de entorno, ubicadas en .env
    # (opcional) expón la raíz por si más adelante cambias prefijo o puerto
    AIRFLOW__API__BASE_URL: "http://airflow-api-server:8080"
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./config:/opt/airflow/config
  user: "${AIRFLOW_UID}:0"
  depends_on:
    postgres:
      condition: service_healthy
    redis:
      condition: service_started
  networks: [airflow-net]

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 10s
      retries: 5
    networks: [airflow-net]

  redis:
    image: redis:7-alpine
    networks: [airflow-net]

  airflow-api-server:
    <<: *airflow-common
    command: api-server
    ports:
      - "8083:8080" # host:contenedor
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      retries: 5

    # ⬇️  Servicio adicional en 3.x
  airflow-dag-processor:
    <<: *airflow-common
    command: dag-processor

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler

  airflow-worker:
    <<: *airflow-common
    command: celery worker

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer

  airflow-init:
    <<: *airflow-common
    command: airflow db migrate
    profiles: ["init"]

  airflow-cli:
    <<: *airflow-common
    entrypoint: ["airflow"]
    profiles: ["cli"]

volumes:
  postgres-db-volume:

networks:
  airflow-net:
